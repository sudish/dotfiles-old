#!/bin/zsh
#
# Show VCS info in prompt.
#
# Handles git by itself and uses vcs_info for all others.

autoload -Uz add-zsh-hook

if is-at-least 4.3.10; then
    autoload -Uz vcs_info

    # Non-git vcs_info
    zstyle ':vcs_info:*' enable bzr darcs # hg cvs svn
    zstyle ':vcs_info:*' formats " %s:$cb[green]%b$cb[yellow]%u%c$cb[none]"
    zstyle ':vcs_info:*' actionformats " %s:$cb[green]%b$cb[red]|%a$cb[yellow]%u%c$cb[none]"
    zstyle ':vcs_info:*' stagedstr '+'
    zstyle ':vcs_info:*' unstagedstr '*'
    zstyle ':vcs_info:bzr:*' use-simple true 

    add-zsh-hook precmd vcs_info
fi

# Computes and displays the status of a git repo in PS1/RPS1.  Information
# displayed includes: branch, '*' for un-added changes, '+' for uncommitted
# changes, '$' for stashed changes.  In addition, the color of the status
# display changes from green to blue if you're in a git svn repo.
#
#   setopt prompt_subst
#   RPROMPT+='$(sj_git_ps1)'
#
# Inspired by and adapted from http://www.jukie.net/~bart/conf/zsh.d/S55_git
# and Shawn O. Pearce's completion script for bash:
# http://repo.or.cz/w/git.git?a=blob_plain;f=contrib/completion/git-completion.bash;hb=master


typeset -A sj_git
sj_git=()

sj_git_status_update() {
    local git_dir branch

    [[ -n $SJ_DEBUG ]] && echo "Parsing git state" >/dev/tty

    sj_git[dir]=
    git_dir=$(git rev-parse --git-dir 2>/dev/null) || return

    sj_git[state]=
    if [[ -d $git_dir/rebase-apply ]]; then
        if [[ -f $git_dir/rebase-apply/rebasing ]]; then
            sj_git[state]="|REBASE"
        elif [[ -f $git_dir/rebase-apply/applying ]]; then
            sj_git[state]="|AM"
        else
            sj_git[state]="|AM/REBASE"
        fi
        branch="$(git symbolic-ref HEAD 2>/dev/null)"
    elif [[ -f $git_dir/rebase-merge/interactive ]]; then
        sj_git[state]="|REBASE -i"
        branch="$(cat "$git_dir/rebase-merge/head-name")"
    elif [[ -d $git_dir/rebase-merge ]]; then
        sj_git[state]="|REBASE -m"
        branch="$(cat "$git_dir/rebase-merge/head-name")"
    elif [[ -f $git_dir/MERGE_HEAD ]]; then
        sj_git[state]="|MERGING"
        branch="$(git symbolic-ref HEAD 2>/dev/null)"
    else
        if [[ -f $git_dir/BISECT_LOG ]]; then
	    sj_git[state]="|BISECTING"
	fi
        branch=$(git symbolic-ref HEAD 2>/dev/null) || \
	    branch=$(git describe --exact-match HEAD 2>/dev/null) || \
	    branch="$(cut -c1-7 "$git_dir/HEAD")..."
    fi

    sj_git[stash]=
    if [[ -e $git_dir/refs/stash ]]; then
	sj_git[stash]='$'
    fi

    sj_git[svn]=
    if [[ -e $git_dir/svn/.metadata ]]; then
	sj_git[svn]='S'
    fi

    sj_git[status]=
    git diff --no-ext-diff --ignore-submodules --quiet --exit-code \
	|| sj_git[status]+='*'
    if git rev-parse --quiet --verify HEAD >/dev/null; then
	git diff-index --cached --quiet --ignore-submodules HEAD -- \
	    || sj_git[status]+='+'
    else
	sj_git[status]+='#'
    fi

    local git_full_dir
    git_full_dir=$(readlink -f ${git_dir:h})
    # "" quotes needed here to stop auto_name_dirs.
    # though why "" stops it from happening is a mystery, albeit a nice one
    sj_git[dir]="${git_full_dir/$HOME/~}"
    sj_git[branch]=${branch#refs/heads/}
}

sj_vcs_ps1() {
    if [[ -z $sj_git[dir] ]]; then
	echo " $vcs_info_msg_0_"
	return
    fi

    local col
    col="$cb[green]"
    [[ -n $sj_git[svn] ]] && col="$cb[cyan]"

    local res
    # the branch name
    res="$col${sj_git[branch]}$cb[none]"

    # is the repo dirty?
    [[ -n $sj_git[status] ]] && res+="$cb[magenta]${sj_git[status]}$cb[none]"

    # is there something in the git stash?
    [[ -n $sj_git[stash] ]] && res+="$cb[magenta]${sj_git[stash]}$cb[none]"

    # are we rebasing, etc.?
    [[ -n $sj_git[state] ]] && res+="$cb[red]${sj_git[state]}$cb[none]"

    echo " %Bgit%b:$res"
}


sj_git_chpwd_update() {
    sj_git_status_update
}

sj_git_precmd_update() {
    case $(history $(($HISTCMD - 1)) ) in   # last command entered
        *git*) sj_git_status_update ;;
    esac
}

add-zsh-hook precmd sj_git_precmd_update
add-zsh-hook chpwd  sj_git_chpwd_update
